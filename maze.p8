pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
panim = 0
traslation_points = {}
mx, my = 0, 0
apply_trans = true

function _init()
	vang, vpow = 0.5, 0
	px, py = find_first_sprite(1)
	mset(px/8, py/8, 24)
	px += 4
	py += 4
	pw, ph = 4, 4
	traslation_points = find_sprites(0)
	for sp in all(traslation_points) do
		mset(sp.x/8, sp.y/8, 24)
	end
end

function find_first_sprite(sprite_id)
 local map_width = 128
 local map_height = 64
	
 for ty = 0, map_height - 1 do
  for tx = 0, map_width - 1 do
   if mget(tx, ty) == sprite_id then
    return tx * 8, ty * 8
   end 
  end
 end

 return nil -- no se encontrれは el sprite
end

function find_sprites(flag)
 local map_width = 128
 local map_height = 64
	local sprites = {}
	
 for ty = 0, map_height - 1 do
  for tx = 0, map_width - 1 do 
   if fget(mget(tx, ty), flag) then
   	add(sprites,
   		{x = tx * 8,
   			y = ty * 8,
   			sprite = mget(tx, ty)
   		}
   	) 
   end
  end
 end

 return sprites -- no se encontrれは el sprite
end

function userinput()
	if (btn(0)) then
		vang += 0.03
	end
	if btn(1) then
		vang -= 0.03
	end
	if btn(2) then
		vpow += 0.1
	end
	if btn(3) then
	 vpow -= 0.1
	end
	vang = vang%1
	vpow = max(min(vpow, 1), 0)
end

function rects_overlap(x1, y1, w1, h1, x2, y2, w2, h2)
 return x1 < x2 + w2 and -- el lado izquierdo del rectれくngulo 1 estれく a la izquierda del lado derecho del rectれくngulo 2
  x1 + w1 > x2 and -- el lado derecho del rectれくngulo 1 estれく a la derecha del lado izquierdo del rectれくngulo 2
  y1 < y2 + h2 and -- el lado superior del rectれくngulo 1 estれく por encima del lado inferior del rectれくngulo 2
  y1 + h1 > y2     -- el lado inferior del rectれくngulo 1 estれく por debajo del lado superior del rectれくngulo 2
end

function overlap_map() 
 local pl = px - pw / 2
 local pu = py - ph / 2

 local left = flr(pl / 8)
 local right = flr((pl + pw - 1) / 8)
 local top = flr(pu / 8)
 local bottom = flr((pu + ph - 1) / 8)

 local tiles = {}

 for tx = left, right do
  for ty = top, bottom do
   if tx >= 0 and ty >= 0 and tx < 128 and ty < 128 then 
    add(tiles, mget(tx, ty))
   end
  end
 end

 for tile in all(tiles) do
	 if fget(tile, 7) then
	  return true
	 end
 end
 return false 
end

function _update()
	userinput()
	if (vpow == 0) return
	panim += 0.1
	panim = panim %6
	local vx, vy = 
		vpow*cos(vang), 
		vpow*sin(vang)
	
 -- intentar mover en el eje x primero
 if vx ~= 0 then
  px = px + vx
  if overlap_map() then
   -- deshacer el movimiento en x si colisiona
   px = px - vx
  end
 end

 -- intentar mover en el eje y despuれたs
 if vy ~= 0 then
  py = py + vy
  if overlap_map() then
   -- deshacer el movimiento en y si colisiona
   py = py - vy
  end
 end
	vx, vy = 0, 0
	
	for sp in all(traslation_points) do
		if (rects_overlap(px, py, pw, ph,
		 sp.x, sp.y, 8, 8)) then
		
		 mx = 16
		 my = 0
		 px = 0
		 apply_trans = false
		end
	end
	
end

function draw_user()
	rspr(flr(1), px-4, py-4, -vang)
end

function _draw()
	cls()
	map(mx, my)
	draw_user()
end



function rspr(s,x,y,a,w,h)
 sw=(w or 1)*8
 sh=(h or 1)*8
 sx=(s%8)*8
 sy=flr(s/8)*8
 x0=flr(0.5*sw)
 y0=flr(0.5*sh)
 sa=sin(a)
 ca=cos(a)
 for ix=sw*-1,sw+4 do
  for iy=sh*-1,sh+4 do
   dx=ix-x0
   dy=iy-y0
   xx=flr(dx*ca-dy*sa+x0)
   yy=flr(dx*sa+dy*ca+y0)
   if (xx>=0 and xx<sw and yy>=0 and yy<=sh-1) then
   	c = sget(sx+xx,sy+yy)
   	if (c ~= 0) then 
   		pset(x+ix,y+iy, c)
   	end
   end
  end
 end
end
__gfx__
00000000000000000000000000000000000000000000000000000000444444444444444444444444444444444dddddd400000000000000000000000000000000
000000000000000000099000000990000009900000009900000990004dddddddddddddddddddddd4dddddddd4dddddd400000000000000000000000000000000
007007009e999887000990000009900000099000000099c000099c004dddddddddddddddddddddd4dddddddd4dddddd400000000000000000000000000000000
00077000899c9888000ff000000ff000000ff000000ffcc0000ffc004dddddddddddddddddddddd4dddddddd4dddddd400000000000000000000000000000000
00077000899c9888000ffcc0000ffc00000ff000000ff000000ff0004dddddddddddddddddddddd4dddddddd4dddddd400000000000000000000000000000000
007007009e999887000099c000099c000009900000099000000990004dddddddddddddddddddddd4dddddddd4dddddd400000000000000000000000000000000
000000000000000000009900000990000009900000099000000990004dddddddddddddddddddddd4dddddddd4dddddd400000000000000000000000000000000
000000000000000000000000000000000000000000000000000000004dddddddddddddddddddddd4444444444dddddd400000000000000000000000000000000
000000000008800000000000b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b34dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
0000080000888800008000003b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b4dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
000008800888888008800000b3bbbbb3b3baabb3b3beebb3b3bccbb34dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
8888888800088000888888883bbbbb3b3ba77a3b3be77e3b3bc77c3b4dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
888888880008800088888888b3bbbbb3b3a77ab3b3e77eb3b3c77cb34dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
0000088000088000088000003bbbbb3b3bbaab3b3bbeeb3b3bbccb3b4dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
000008000008800000800000b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b34dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
0000000000088000000000003b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b4dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
000880000000000000000000000000000000000000000000000000004dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
000880000000000000000000000000000000000000000000000000004dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
000880000000000000000000000000000000000000000000000000004dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
000880000000000000000000000000000000000000000000000000004dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
000880000000000000000000000000000000000000000000000000004dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
088888800000000000000000000000000000000000000000000000004dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
008888000000000000000000000000000000000000000000000000004dddddddddddddddddddddd4000000000000000000000000000000000000000000000000
00088000000000000000000000000000000000000000000000000000444444444444444444444444000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000001010180808080000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1313131313131313131313131313131313131313131313131313131313000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1318131318181318181318141818181313181313181813181813181418000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1318181818131513181318181813181313181818181315131813181818000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1413151318181818181518131315181314131513181818181815181313000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1318181318131813181318131818181313181813181318131813181318000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1313181818141813161318161313181313131818181418131613181613000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1518131316131818181818131813181515181313161318181818181318000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1318131813181315131318131818181313131313131313131313131313131313000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1318181813181318131418131813181012181818181818181818181818181813000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1318131813181818131818181815131313131313131313131313131313131313000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1313131815131418131318131813181613131318151314181313181318000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1314181818181818181618131818181313141818181818181816181318000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1318181318181318181318161313181313181813181813181813181613000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1313181313151318141818181818181513131813131513181418181818000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1318181818131818181813181818011313181818181318181818131818000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1313151313131313131613131313131313131513131313131316131313000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
